// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model UsersDb {
    id            String        @id @default(uuid())
    email         String        @unique
    name          String
    password      String
    isActive      Boolean       @default(true)
    createdAt     DateTime?     @default(now())
    updatedAt     DateTime?
    lastLogin     DateTime?
    loginAttempts Int           @default(0)
    isLocked      Boolean       @default(false)
	
    UserRolesDb   UserRolesDb[]

    @@map("users")
}

model RolesDb {
    id        String    @id @default(uuid())
    name      String
    isActive  Boolean   @default(true)
    createdAt DateTime? @default(now())
    updatedAt DateTime?

    PermissionsDb PermissionsDb[]
	UserRolesDb UserRolesDb[] @relation(name: "RolesUser")

    @@map("roles")
}

model PermissionsDb {
    id        String    @id @default(uuid())
    name      String
    isActive  Boolean   @default(true)
    createdAt DateTime? @default(now())
    updatedAt DateTime?
	
    roleId    String
    role      RolesDb   @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@map("permissions")
}

model UserRolesDb {
    id String @id @default(uuid())

    userId String
    user   UsersDb @relation(fields: [userId], references: [id], onDelete: Cascade)

    roleId String
    role   RolesDb @relation(fields: [roleId], references: [id], onDelete: Cascade, name: "RolesUser")

    createdAt DateTime? @default(now())

    @@map("user_roles")
}
